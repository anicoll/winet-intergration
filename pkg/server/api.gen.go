// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ChangeBatteryStatePayloadState.
const (
	Charge          ChangeBatteryStatePayloadState = "charge"
	Discharge       ChangeBatteryStatePayloadState = "discharge"
	SelfConsumption ChangeBatteryStatePayloadState = "self_consumption"
)

// Defines values for ChangeInverterStatePayloadState.
const (
	Off ChangeInverterStatePayloadState = "off"
	On  ChangeInverterStatePayloadState = "on"
)

// AmberPrice defines model for AmberPrice.
type AmberPrice struct {
	// ChannelType indicates if the price is feedin or general.
	ChannelType string    `json:"channelType"`
	CreatedAt   time.Time `json:"createdAt"`

	// Duration duration in minutes
	Duration int       `json:"duration"`
	EndTime  time.Time `json:"endTime"`

	// Forecast indicates if the price is a forecast price or not.
	Forecast   bool      `json:"forecast"`
	Id         int       `json:"id"`
	PerKwh     float32   `json:"perKwh"`
	SpotPerKwh float32   `json:"spotPerKwh"`
	StartTime  time.Time `json:"startTime"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

// ChangeBatteryStatePayload defines model for ChangeBatteryStatePayload.
type ChangeBatteryStatePayload struct {
	Power *string                        `json:"power,omitempty"`
	State ChangeBatteryStatePayloadState `json:"state"`
}

// ChangeBatteryStatePayloadState defines model for ChangeBatteryStatePayload.State.
type ChangeBatteryStatePayloadState string

// ChangeFeedinPayload defines model for ChangeFeedinPayload.
type ChangeFeedinPayload struct {
	Disable bool `json:"disable"`
}

// ChangeInverterStatePayload defines model for ChangeInverterStatePayload.
type ChangeInverterStatePayload struct {
	State ChangeInverterStatePayloadState `json:"state"`
}

// ChangeInverterStatePayloadState defines model for ChangeInverterStatePayload.State.
type ChangeInverterStatePayloadState string

// Empty defines model for Empty.
type Empty = map[string]interface{}

// Property defines model for Property.
type Property struct {
	Id                *int       `json:"id,omitempty"`
	Identifier        *string    `json:"identifier,omitempty"`
	Slug              *string    `json:"slug,omitempty"`
	Timestamp         *time.Time `json:"timestamp,omitempty"`
	UnitOfMeasurement *string    `json:"unit_of_measurement,omitempty"`
	Value             *string    `json:"value,omitempty"`
}

// GetAmberPricesFromToParams defines parameters for GetAmberPricesFromTo.
type GetAmberPricesFromToParams struct {
	Site *string `form:"site,omitempty" json:"site,omitempty"`
}

// GetPropertyIdentifierSlugParams defines parameters for GetPropertyIdentifierSlug.
type GetPropertyIdentifierSlugParams struct {
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`
	To   *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// PostBatteryStateJSONRequestBody defines body for PostBatteryState for application/json ContentType.
type PostBatteryStateJSONRequestBody = ChangeBatteryStatePayload

// PostInverterFeedinJSONRequestBody defines body for PostInverterFeedin for application/json ContentType.
type PostInverterFeedinJSONRequestBody = ChangeFeedinPayload

// PostInverterStateJSONRequestBody defines body for PostInverterState for application/json ContentType.
type PostInverterStateJSONRequestBody = ChangeInverterStatePayload

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /amber/prices/{from}/{to})
	GetAmberPricesFromTo(w http.ResponseWriter, r *http.Request, from time.Time, to time.Time, params GetAmberPricesFromToParams)

	// (POST /battery/{state})
	PostBatteryState(w http.ResponseWriter, r *http.Request, state string)

	// (POST /inverter/feedin)
	PostInverterFeedin(w http.ResponseWriter, r *http.Request)

	// (POST /inverter/{state})
	PostInverterState(w http.ResponseWriter, r *http.Request, state string)
	// Get properties
	// (GET /properties)
	GetProperties(w http.ResponseWriter, r *http.Request)

	// (GET /property/{identifier}/{slug})
	GetPropertyIdentifierSlug(w http.ResponseWriter, r *http.Request, identifier string, slug string, params GetPropertyIdentifierSlugParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAmberPricesFromTo operation middleware
func (siw *ServerInterfaceWrapper) GetAmberPricesFromTo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "from" -------------
	var from time.Time

	err = runtime.BindStyledParameterWithOptions("simple", "from", mux.Vars(r)["from"], &from, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Path parameter "to" -------------
	var to time.Time

	err = runtime.BindStyledParameterWithOptions("simple", "to", mux.Vars(r)["to"], &to, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAmberPricesFromToParams

	// ------------- Optional query parameter "site" -------------

	err = runtime.BindQueryParameter("form", true, false, "site", r.URL.Query(), &params.Site)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "site", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAmberPricesFromTo(w, r, from, to, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostBatteryState operation middleware
func (siw *ServerInterfaceWrapper) PostBatteryState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "state" -------------
	var state string

	err = runtime.BindStyledParameterWithOptions("simple", "state", mux.Vars(r)["state"], &state, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBatteryState(w, r, state)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostInverterFeedin operation middleware
func (siw *ServerInterfaceWrapper) PostInverterFeedin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInverterFeedin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostInverterState operation middleware
func (siw *ServerInterfaceWrapper) PostInverterState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "state" -------------
	var state string

	err = runtime.BindStyledParameterWithOptions("simple", "state", mux.Vars(r)["state"], &state, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInverterState(w, r, state)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProperties operation middleware
func (siw *ServerInterfaceWrapper) GetProperties(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProperties(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPropertyIdentifierSlug operation middleware
func (siw *ServerInterfaceWrapper) GetPropertyIdentifierSlug(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", mux.Vars(r)["identifier"], &identifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", mux.Vars(r)["slug"], &slug, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPropertyIdentifierSlugParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPropertyIdentifierSlug(w, r, identifier, slug, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/amber/prices/{from}/{to}", wrapper.GetAmberPricesFromTo).Methods("GET")

	r.HandleFunc(options.BaseURL+"/battery/{state}", wrapper.PostBatteryState).Methods("POST")

	r.HandleFunc(options.BaseURL+"/inverter/feedin", wrapper.PostInverterFeedin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/inverter/{state}", wrapper.PostInverterState).Methods("POST")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.GetProperties).Methods("GET")

	r.HandleFunc(options.BaseURL+"/property/{identifier}/{slug}", wrapper.GetPropertyIdentifierSlug).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/iRhD9K1YnRw82TDIH32ajbDLKBYWRVspqhBq7DL3r/pjq8mws5P8eddtgGwwL",
	"Col2b+Curo/Xr6relqVaGq1AkWXJltl0A5L7n49yBThHkYL7Z1AbQBLgz9INVwqK58r4wwxsisKQ0Iol",
	"TKhMpJzABiIPaAOBcU4CYYMcIBMq0BisQQHyYsJCBn9zaQpgCWs/spCRd8wsoVBrVocsReAE2SO5cN2N",
	"WTy7v5vGd/H0eTpL4jiJ479YyHKNkhNLWMYJ7khIGPOZlciblA8r2J0EQgVSqJLA9hP9ee9MKII1oPMG",
	"Knt2gW6XX64RUm7pGoR5sLvVftMYKE0DnAlL2IdbaV0AVy6eyAbJT8eqNIB/fNkM7OLJdHb/095YlY43",
	"ztYaTfNr7Ikj3RjD0mQ35k0dMoTXUiBkLPnoQOsxqfdo4aBJ+gzuZ9Xxpl//ALs96C/7XPTqE6Tk6vtl",
	"w9Ua3nEiwGpBnGDOq0Lz7Lhnjf4COIDhYfIwApl1XrydKqUr0UKRL1OtbClNW2W64bh2eWbCtr9f+p08",
	"ckU44hpOm69C2iRwutr3foqcrDMTlq+KIYnGKX8Qd3fxdOQn9QZIgOeBPgLQ16/zfIjRzVD5VRqqXLyj",
	"k3mTV3Wc4yW9LjJQJHJxwBq2+P0h/nOxfJyONZwtyvXQfMXTz6VZ5q4YUGk1dsu1miUuzS1bXwla6nwp",
	"gdsSQYI6GAKfP2zG7r3xojwYQdM4/ur7nGaPsxQq1/6JBHmPH4QCulsEC8A3QBayN0DbDPfpJJ7ELhFt",
	"QHEjWMLu/afQE8U/X8Td0Iz8iLfRNkct62hLunaHa/CFuuf2U+kpYwn7Dahb6PY9avmsvUfkEgjQsuSj",
	"WzM5LwsPbfurpehrCeheTnHpMRDkp5RXCz3qddhsB9Rur7k8WR+2pi87Nzea0KPBSZ8NfZHnF+fBGq1s",
	"00azOPZySCtq6cWNKdxuFlpFn2wjLroggkD6iz8i5CxhP0Sd/Ipa7RX1hFe9T4Ej8qrh0lALIFCJygae",
	"Ec3StxNnWIcsWjWLIdr66VE3a8CO0GOuLfW3yDE1RhC1reVpUEfxey3B0judVVdBdw6x01twBLDGOPBm",
	"wd7uXz7sueya+TySSdpk4mEMduF3TyfaXRM1ovn80+0WU7Ma2X+J8nD7nsbX2Tn9bIFIqLX9liG+qD0G",
	"y/977I9R9fL9NshQ0JxaevPO6v+Y3XvFdcHk7gro1xYyW0rJsWryD3pl9suuom2nz+po63RXfQEQ1dP+",
	"1sJJtUt43BOC15B5fA3bJur1bg4kSKslrlzgJ5x5bfAtaoFr+LRTAtZAKnKR9qgTrKogFwUBNtKgrv8J",
	"AAD//8deE7D5EQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
