package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// Property represents a row from 'public.property'.
type Property struct {
	ID                int       `json:"id"`                  // id
	TimeStamp         time.Time `json:"time_stamp"`          // time_stamp
	UnitOfMeasurement string    `json:"unit_of_measurement"` // unit_of_measurement
	Value             string    `json:"value"`               // value
	Identifier        string    `json:"identifier"`          // identifier
	Slug              string    `json:"slug"`                // slug
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Property] exists in the database.
func (p *Property) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Property] has been marked for deletion
// from the database.
func (p *Property) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Property] to the database.
func (p *Property) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.property (` +
		`time_stamp, unit_of_measurement, value, identifier, slug` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug)
	if err := db.QueryRowContext(ctx, sqlstr, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Property] in the database.
func (p *Property) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.property SET ` +
		`time_stamp = $1, unit_of_measurement = $2, value = $3, identifier = $4, slug = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Property] to the database.
func (p *Property) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Property].
func (p *Property) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.property (` +
		`id, time_stamp, unit_of_measurement, value, identifier, slug` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`time_stamp = EXCLUDED.time_stamp, unit_of_measurement = EXCLUDED.unit_of_measurement, value = EXCLUDED.value, identifier = EXCLUDED.identifier, slug = EXCLUDED.slug `
	// run
	logf(sqlstr, p.ID, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.TimeStamp, p.UnitOfMeasurement, p.Value, p.Identifier, p.Slug); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Property] from the database.
func (p *Property) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.property ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PropertyByIdentifier retrieves a row from 'public.property' as a [Property].
//
// Generated from index 'idx_properties_identifier'.
func PropertyByIdentifier(ctx context.Context, db DB, identifier string) ([]*Property, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, time_stamp, unit_of_measurement, value, identifier, slug ` +
		`FROM public.property ` +
		`WHERE identifier = $1`
	// run
	logf(sqlstr, identifier)
	rows, err := db.QueryContext(ctx, sqlstr, identifier)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Property
	for rows.Next() {
		p := Property{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.ID, &p.TimeStamp, &p.UnitOfMeasurement, &p.Value, &p.Identifier, &p.Slug); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PropertyByTimeStamp retrieves a row from 'public.property' as a [Property].
//
// Generated from index 'idx_properties_timestamp'.
func PropertyByTimeStamp(ctx context.Context, db DB, timeStamp time.Time) ([]*Property, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, time_stamp, unit_of_measurement, value, identifier, slug ` +
		`FROM public.property ` +
		`WHERE time_stamp = $1`
	// run
	logf(sqlstr, timeStamp)
	rows, err := db.QueryContext(ctx, sqlstr, timeStamp)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Property
	for rows.Next() {
		p := Property{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.ID, &p.TimeStamp, &p.UnitOfMeasurement, &p.Value, &p.Identifier, &p.Slug); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PropertyByID retrieves a row from 'public.property' as a [Property].
//
// Generated from index 'property_pkey'.
func PropertyByID(ctx context.Context, db DB, id int) (*Property, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, time_stamp, unit_of_measurement, value, identifier, slug ` +
		`FROM public.property ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Property{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.TimeStamp, &p.UnitOfMeasurement, &p.Value, &p.Identifier, &p.Slug); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
