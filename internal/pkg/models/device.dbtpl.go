package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Device represents a row from 'public.device'.
type Device struct {
	ID           string         `json:"id"`            // id
	Model        sql.NullString `json:"model"`         // model
	SerialNumber sql.NullString `json:"serial_number"` // serial_number
	CreatedAt    sql.NullTime   `json:"created_at"`    // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Device] exists in the database.
func (d *Device) Exists() bool {
	return d._exists
}

// Deleted returns true when the [Device] has been marked for deletion
// from the database.
func (d *Device) Deleted() bool {
	return d._deleted
}

// Insert inserts the [Device] to the database.
func (d *Device) Insert(ctx context.Context, db DB) error {
	switch {
	case d._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case d._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.device (` +
		`id, model, serial_number, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, d.ID, d.Model, d.SerialNumber, d.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.Model, d.SerialNumber, d.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Update updates a [Device] in the database.
func (d *Device) Update(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case d._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.device SET ` +
		`model = $1, serial_number = $2, created_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, d.Model, d.SerialNumber, d.CreatedAt, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.Model, d.SerialNumber, d.CreatedAt, d.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Device] to the database.
func (d *Device) Save(ctx context.Context, db DB) error {
	if d.Exists() {
		return d.Update(ctx, db)
	}
	return d.Insert(ctx, db)
}

// Upsert performs an upsert for [Device].
func (d *Device) Upsert(ctx context.Context, db DB) error {
	switch {
	case d._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.device (` +
		`id, model, serial_number, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`model = EXCLUDED.model, serial_number = EXCLUDED.serial_number, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, d.ID, d.Model, d.SerialNumber, d.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.Model, d.SerialNumber, d.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Delete deletes the [Device] from the database.
func (d *Device) Delete(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return nil
	case d._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.device ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	d._deleted = true
	return nil
}

// DeviceByID retrieves a row from 'public.device' as a [Device].
//
// Generated from index 'device_pkey'.
func DeviceByID(ctx context.Context, db DB, id string) (*Device, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, model, serial_number, created_at ` +
		`FROM public.device ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	d := Device{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&d.ID, &d.Model, &d.SerialNumber, &d.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}
