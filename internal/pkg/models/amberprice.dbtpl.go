// Package models contains generated code for schema 'public'.
package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Amberprice represents a row from 'public.amberprice'.
type Amberprice struct {
	ID          int          `json:"id"`           // id
	PerKwh      float64      `json:"per_kwh"`      // per_kwh
	SpotPerKwh  float64      `json:"spot_per_kwh"` // spot_per_kwh
	StartTime   time.Time    `json:"start_time"`   // start_time
	EndTime     time.Time    `json:"end_time"`     // end_time
	Duration    int          `json:"duration"`     // duration
	Forecast    bool         `json:"forecast"`     // forecast
	ChannelType string       `json:"channel_type"` // channel_type
	CreatedAt   sql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   sql.NullTime `json:"updated_at"`   // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Amberprice] exists in the database.
func (a *Amberprice) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Amberprice] has been marked for deletion
// from the database.
func (a *Amberprice) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Amberprice] to the database.
func (a *Amberprice) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.amberprice (` +
		`per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt).Scan(&a.ID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Amberprice] in the database.
func (a *Amberprice) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.amberprice SET ` +
		`per_kwh = $1, spot_per_kwh = $2, start_time = $3, end_time = $4, duration = $5, forecast = $6, channel_type = $7, created_at = $8, updated_at = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Amberprice] to the database.
func (a *Amberprice) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Amberprice].
func (a *Amberprice) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.amberprice (` +
		`id, per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`per_kwh = EXCLUDED.per_kwh, spot_per_kwh = EXCLUDED.spot_per_kwh, start_time = EXCLUDED.start_time, end_time = EXCLUDED.end_time, duration = EXCLUDED.duration, forecast = EXCLUDED.forecast, channel_type = EXCLUDED.channel_type, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, a.ID, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.PerKwh, a.SpotPerKwh, a.StartTime, a.EndTime, a.Duration, a.Forecast, a.ChannelType, a.CreatedAt, a.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Amberprice] from the database.
func (a *Amberprice) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.amberprice ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AmberpriceByID retrieves a row from 'public.amberprice' as a [Amberprice].
//
// Generated from index 'amberprice_pkey'.
func AmberpriceByID(ctx context.Context, db DB, id int) (*Amberprice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at ` +
		`FROM public.amberprice ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	a := Amberprice{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.PerKwh, &a.SpotPerKwh, &a.StartTime, &a.EndTime, &a.Duration, &a.Forecast, &a.ChannelType, &a.CreatedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AmberpriceByEndTime retrieves a row from 'public.amberprice' as a [Amberprice].
//
// Generated from index 'idx_amber_price_end_time'.
func AmberpriceByEndTime(ctx context.Context, db DB, endTime time.Time) ([]*Amberprice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at ` +
		`FROM public.amberprice ` +
		`WHERE end_time = $1`
	// run
	logf(sqlstr, endTime)
	rows, err := db.QueryContext(ctx, sqlstr, endTime)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Amberprice
	for rows.Next() {
		a := Amberprice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&a.ID, &a.PerKwh, &a.SpotPerKwh, &a.StartTime, &a.EndTime, &a.Duration, &a.Forecast, &a.ChannelType, &a.CreatedAt, &a.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AmberpriceByStartTime retrieves a row from 'public.amberprice' as a [Amberprice].
//
// Generated from index 'idx_amber_price_start_time'.
func AmberpriceByStartTime(ctx context.Context, db DB, startTime time.Time) ([]*Amberprice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at ` +
		`FROM public.amberprice ` +
		`WHERE start_time = $1`
	// run
	logf(sqlstr, startTime)
	rows, err := db.QueryContext(ctx, sqlstr, startTime)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Amberprice
	for rows.Next() {
		a := Amberprice{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&a.ID, &a.PerKwh, &a.SpotPerKwh, &a.StartTime, &a.EndTime, &a.Duration, &a.Forecast, &a.ChannelType, &a.CreatedAt, &a.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AmberpriceByStartTimeChannelType retrieves a row from 'public.amberprice' as a [Amberprice].
//
// Generated from index 'idx_amber_price_unique_start_time_channel_type'.
func AmberpriceByStartTimeChannelType(ctx context.Context, db DB, startTime time.Time, channelType string) (*Amberprice, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, per_kwh, spot_per_kwh, start_time, end_time, duration, forecast, channel_type, created_at, updated_at ` +
		`FROM public.amberprice ` +
		`WHERE start_time = $1 AND channel_type = $2`
	// run
	logf(sqlstr, startTime, channelType)
	a := Amberprice{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, startTime, channelType).Scan(&a.ID, &a.PerKwh, &a.SpotPerKwh, &a.StartTime, &a.EndTime, &a.Duration, &a.Forecast, &a.ChannelType, &a.CreatedAt, &a.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}
